'use client';

import PanelCard from './PanelCard';

export const testsByCondition: { [key: string]: string[] } = {
  "Cukrzyca typu 2": ["HbA1c", "Glukoza na czczo", "Insulina"],
  "Cukrzyca typu 1": ["HbA1c", "Glukoza na czczo"],
  "Nadci≈õnienie tƒôtnicze": ["Ci≈õnienie krwi", "Profil lipidowy"],
  "Mia≈ºd≈ºyca": ["Cholesterol ca≈Çkowity", "LDL", "HDL", "Tr√≥jglicerydy"],
  "Oty≈Ço≈õƒá": ["BMI", "Obw√≥d pasa"],
  "Insulinooporno≈õƒá": ["Insulina", "Glukoza", "HOMA-IR"],
  "Rak jelita grubego": ["Kolonoskopia ‚Äì opis", "CEA"],
  "Rak ≈ºo≈ÇƒÖdka": ["Gastroskopia ‚Äì opis", "CA19-9"],
  "Choroby nerek": ["Kreatynina", "eGFR", "Bia≈Çko w moczu"],
  "Choroby wƒÖtroby": ["AST", "ALT", "Bilirubina", "USG wƒÖtroby ‚Äì opis"],
  "Anemia niedoborowa": ["Hemoglobina", "MCV", "Ferrytyna"],
  "PCOS": ["Testosteron", "DHEA-S", "USG jajnik√≥w ‚Äì opis"],
  "≈Åuszczyca (nasilenie przy z≈Çej diecie)": ["Opis stanu sk√≥ry"],
  "Atopowe zapalenie sk√≥ry (AZS)": ["Opis zmian sk√≥rnych"],
  "Depresja": ["Skala depresji ‚Äì opis (np. PHQ-9)"],
  "Migreny": ["Opis kliniczny migren"],
  "Zesp√≥≈Ç metaboliczny": ["Obw√≥d pasa", "Glukoza", "Lipidogram"],
  "Choroby paso≈ºytnicze (parazytozy)": ["Wynik badania paso≈ºyta ‚Äì opis"],
  // Dla chor√≥b bez przypisanych bada≈Ñ mo≈ºemy pokazywaƒá og√≥lny opis:
  "Kamica nerkowa": ["Opis badania USG lub wyniku laboratoryjnego"],
  "Przewlek≈Ça choroba nerek (PChN)": ["Kreatynina", "eGFR", "Bia≈Çko w moczu"],
  "Hiperlipidemia (wysoki cholesterol, triglicerydy)": ["Cholesterol ca≈Çkowity", "LDL", "HDL", "Tr√≥jglicerydy"],
  "Zaburzenia pracy tarczycy: niedoczynno≈õƒá, nadczynno≈õƒá": ["TSH", "FT3", "FT4"],
  "Choroba niedokrwienna serca (choroba wie≈Ñcowa)": ["EKG ‚Äì opis", "Troponina", "Profil lipidowy"],
  "Zawa≈Ç miƒô≈õnia sercowego": ["EKG ‚Äì opis", "Troponina"],
  "Udary m√≥zgu (niedokrwienne)": ["CT g≈Çowy ‚Äì opis", "MRI m√≥zgu ‚Äì opis"],
  "Niewydolno≈õƒá serca": ["Frakcja wyrzutowa LVEF", "NT-proBNP"],
  "Rak prze≈Çyku": ["Endoskopia ‚Äì opis", "Biopsja ‚Äì opis"],
  "Rak trzustki": ["CA19-9", "USG/MRI jamy brzusznej ‚Äì opis"],
  "Rak wƒÖtroby": ["AFP (marker nowotworowy)", "USG wƒÖtroby ‚Äì opis"],
  "Rak piersi": ["Mammografia ‚Äì opis", "Biopsja piersi ‚Äì opis"],
  "Rak prostaty": ["PSA", "Biopsja prostaty ‚Äì opis"],
  "Rak jajnika": ["CA125", "USG ginekologiczne ‚Äì opis"],
  "Choroby trzustki": ["Amylaza", "Lipaza", "USG trzustki ‚Äì opis"],
  "Choroby pƒôcherzyka ≈º√≥≈Çciowego (kamica ≈º√≥≈Çciowa)": ["USG jamy brzusznej ‚Äì opis"],
  "Zesp√≥≈Ç jelita dra≈ºliwego (IBS)": ["Rozpoznanie kliniczne ‚Äì opis"],
  "Choroba uchy≈Çkowa jelit": ["Kolonoskopia ‚Äì opis"],
  "Zaparcia przewlek≈Çe": ["Wywiad kliniczny ‚Äì opis"],
  "Biegunki przewlek≈Çe": ["Badania ka≈Çu ‚Äì opis"],
  "Nietolerancje pokarmowe": ["Testy alergiczne IgG/IgE", "Opis nietolerancji"],
  "Zapalenie ≈ºo≈ÇƒÖdka": ["Gastroskopia ‚Äì opis"],
  "Celiakia": ["Przeciwcia≈Ça tTG", "Endoskopia ‚Äì opis"],
  "Osteoporoza": ["Badanie densytometryczne (DEXA)"],
  "Osteopenia": ["Badanie densytometryczne (DEXA)"],
  "Choroba zwyrodnieniowa staw√≥w": ["RTG staw√≥w ‚Äì opis"],
};

interface TestResultsFormProps {
  selectedTests: string[];
  testResults: { [key: string]: string };
  setTestResults: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;
}

const TestResultsForm: React.FC<TestResultsFormProps> = ({ selectedTests, testResults, setTestResults }) => {
  const handleResultChange = (testName: string, value: string) => {
    setTestResults((prev) => ({
      ...prev,
      [testName]: value
    }));
  };

  return (
    <PanelCard title="üß™ Wyniki bada≈Ñ" className="bg-[#0d1117] text-white border border-gray-600">
      {selectedTests.map((condition) => (
        <div key={condition} className="border border-gray-600 p-4 mb-4 rounded-md bg-[#1e293b]">
          <h3 className="font-semibold text-white mb-3">{condition}</h3>

          {(testsByCondition[condition] || ["Opis choroby"]).map((testName) => (
            <div key={testName} className="mb-3">
              <label className="block text-sm text-white mb-1">{testName}</label>
              <input
                type="text"
                value={testResults[testName] || ''}
                onChange={(e) => handleResultChange(testName, e.target.value)}
                placeholder={`Wpisz wynik: ${testName}`}
                className="w-full rounded-md px-3 py-2 bg-[#0f172a] text-white border border-gray-500 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          ))}
        </div>
      ))}
    </PanelCard>
  );
};

export default TestResultsForm;
